{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Push your Django Apps to Heroku \u00b6 Mohsin Mahmood edited this page on May 22, 2019 Heroku is a cloud application platform, it is a PaaS (Platform-as-a-service) service. It allows you to deploy your web application from your localhost to cloud so that your application could be commercialized and could get production ready. 1. Preparing your application \u00b6 Copy the Project folder separately for deployment. 2. Initialize Git Repositor \u00b6 Install Git Press WIN + R Type cmd and click OK Navigate to project folder Make sure your are in the directory where the manage.py exists 1 2 3 4 git config --global user.name \"Your Name\" git config --global user.email \"you@youraddress.com\" git config --global user.email \"you@youraddress.com\" git init 3. Add Files To Git \u00b6 1 2 3 git add --all git commit -m \"Commit Message\" git push 4. Activate Virtual Environment \u00b6 Activating virtual environment. 1 2 3 4 manage.py # The configuration file. venv/ Scripts/ activate Run these command to activate the environment. 1 2 cd venv/Scripts/ activate If virtual environment not already exists. Run these commands on command prompt. 1 pip install virtualenv Install all the required libraries that your project required via pip command. Plus install the following dependencies in your virtual environment. 1 2 3 pip install gunicorn pip install django-heroku pip install python-decouple django-heroku: official package by Heroku which made our deployment simple. 5 Modify Setting.py file \u00b6 Now, In app/settings.py file add below content 1 2 3 4 #import os import django_heroku from decouple import config import dj_database_url At the end of the setting.py file add this line also. 1 django_heroku . settings ( locals ()) Now we need to hide the SECRET_KEY from the deployment code. For this, add this line of code before SECRET_KEY = \"Djfhslkdfsjf*(skdf0suerjwehksjdf\" 1 SECRET_KEY = config ( 'SECRET_KEY' ) Move your actual SECRET_KEY to the .env file that we are going to create. 6. Create a file .env \u00b6 Now, run a command in your terminal.It will create a file .env in your app directory. 1 touch .env Add your SECRET_KEY from setting.py to .env file. 7. Adding more to setting.py \u00b6 Do this in your app/settings.py . 1 2 3 4 STATICFILES_DIRS = [ os . path . join ( BASE_DIR , \"static\" ) ] Make sure you do not have this command in setting.py file already. If so remain it as it is. For more info 1 STATIC_ROOT = os . path . join ( BASE_DIR , 'staticfiles' ) 8. Static file serving for web apps \u00b6 To serve static assets I use the WhiteNoise project. To install: pip install whitenoise For more info Do this in your app/settings.py file. 1 2 3 4 5 6 #... #'django.middleware.security.SecurityMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware' , #'django.contrib.sessions.middleware.SessionMiddleware', #'django.middleware.common.CommonMiddleware', #... 1 STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' 9. Create a Procfile \u00b6 Open the command prompt in your directory and type this command. Make sure you type Procfile correctly (casesensitve) 1 touch Procfile Open the Procfile and add this line in the file. 1 web: gunicorn <project name>.wsgi 10. Run Django Server \u00b6 Type this command in the command promt to open the django server. 1 python manage.py runserver run this command too. 1 python manage.py migrate If your site is working correctly then move to next step. 11. Creating a file requirements.txt \u00b6 This command create a file requiremets.txt and add all the dependencies that your application needed while pushing to heroku. 1 pip freeze > requirements.txt add dependency requests==2.21.0 to the requirements.txt file. 12. Heroku Sign up \u00b6 Start a heroku account\u200a\u2014\u200aSign up. Install Heroku Toolbelt commands After installing heroku toolbelt your terminal will support all the heroku commands.Open your terminal as administrator and run this code 1 heroku login login to your heroku account via terminal Enter your Heroku credentials. 1 2 3 Email: example@gmail.com Password (typing will be hidden): Authentication successful. Inside the project root, create a Heroku App: 1 heroku create Adding a Heroku app to Git remote 1 heroku git:remote -a <APPNAME> Open the heroku dashboard and navigate to your new created app. In setting tab, add the config vars: SECRET_KEY 13. Update Git repository \u00b6 1 2 3 git add --all git status # to view all the changes git commit -m \"ready to push\" 14. Finally Push to Heroku \u00b6 1 git push heroku master","title":"Django | Heroku"},{"location":"#push-your-django-apps-to-heroku","text":"Mohsin Mahmood edited this page on May 22, 2019 Heroku is a cloud application platform, it is a PaaS (Platform-as-a-service) service. It allows you to deploy your web application from your localhost to cloud so that your application could be commercialized and could get production ready.","title":"Push your Django Apps to Heroku"},{"location":"#1-preparing-your-application","text":"Copy the Project folder separately for deployment.","title":"1. Preparing your application"},{"location":"#2-initialize-git-repositor","text":"Install Git Press WIN + R Type cmd and click OK Navigate to project folder Make sure your are in the directory where the manage.py exists 1 2 3 4 git config --global user.name \"Your Name\" git config --global user.email \"you@youraddress.com\" git config --global user.email \"you@youraddress.com\" git init","title":"2. Initialize Git Repositor"},{"location":"#3-add-files-to-git","text":"1 2 3 git add --all git commit -m \"Commit Message\" git push","title":"3. Add Files To Git"},{"location":"#4-activate-virtual-environment","text":"Activating virtual environment. 1 2 3 4 manage.py # The configuration file. venv/ Scripts/ activate Run these command to activate the environment. 1 2 cd venv/Scripts/ activate If virtual environment not already exists. Run these commands on command prompt. 1 pip install virtualenv Install all the required libraries that your project required via pip command. Plus install the following dependencies in your virtual environment. 1 2 3 pip install gunicorn pip install django-heroku pip install python-decouple django-heroku: official package by Heroku which made our deployment simple.","title":"4. Activate Virtual Environment"},{"location":"#5-modify-settingpy-file","text":"Now, In app/settings.py file add below content 1 2 3 4 #import os import django_heroku from decouple import config import dj_database_url At the end of the setting.py file add this line also. 1 django_heroku . settings ( locals ()) Now we need to hide the SECRET_KEY from the deployment code. For this, add this line of code before SECRET_KEY = \"Djfhslkdfsjf*(skdf0suerjwehksjdf\" 1 SECRET_KEY = config ( 'SECRET_KEY' ) Move your actual SECRET_KEY to the .env file that we are going to create.","title":"5 Modify Setting.py file"},{"location":"#6-create-a-file-env","text":"Now, run a command in your terminal.It will create a file .env in your app directory. 1 touch .env Add your SECRET_KEY from setting.py to .env file.","title":"6. Create a file .env"},{"location":"#7-adding-more-to-settingpy","text":"Do this in your app/settings.py . 1 2 3 4 STATICFILES_DIRS = [ os . path . join ( BASE_DIR , \"static\" ) ] Make sure you do not have this command in setting.py file already. If so remain it as it is. For more info 1 STATIC_ROOT = os . path . join ( BASE_DIR , 'staticfiles' )","title":"7. Adding more to setting.py"},{"location":"#8-static-file-serving-for-web-apps","text":"To serve static assets I use the WhiteNoise project. To install: pip install whitenoise For more info Do this in your app/settings.py file. 1 2 3 4 5 6 #... #'django.middleware.security.SecurityMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware' , #'django.contrib.sessions.middleware.SessionMiddleware', #'django.middleware.common.CommonMiddleware', #... 1 STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'","title":"8. Static file serving for web apps"},{"location":"#9-create-a-procfile","text":"Open the command prompt in your directory and type this command. Make sure you type Procfile correctly (casesensitve) 1 touch Procfile Open the Procfile and add this line in the file. 1 web: gunicorn <project name>.wsgi","title":"9. Create a Procfile"},{"location":"#10-run-django-server","text":"Type this command in the command promt to open the django server. 1 python manage.py runserver run this command too. 1 python manage.py migrate If your site is working correctly then move to next step.","title":"10. Run Django Server"},{"location":"#11-creating-a-file-requirementstxt","text":"This command create a file requiremets.txt and add all the dependencies that your application needed while pushing to heroku. 1 pip freeze > requirements.txt add dependency requests==2.21.0 to the requirements.txt file.","title":"11. Creating a file requirements.txt"},{"location":"#12-heroku-sign-up","text":"Start a heroku account\u200a\u2014\u200aSign up. Install Heroku Toolbelt commands After installing heroku toolbelt your terminal will support all the heroku commands.Open your terminal as administrator and run this code 1 heroku login login to your heroku account via terminal Enter your Heroku credentials. 1 2 3 Email: example@gmail.com Password (typing will be hidden): Authentication successful. Inside the project root, create a Heroku App: 1 heroku create Adding a Heroku app to Git remote 1 heroku git:remote -a <APPNAME> Open the heroku dashboard and navigate to your new created app. In setting tab, add the config vars: SECRET_KEY","title":"12. Heroku Sign up"},{"location":"#13-update-git-repository","text":"1 2 3 git add --all git status # to view all the changes git commit -m \"ready to push\"","title":"13. Update Git repository"},{"location":"#14-finally-push-to-heroku","text":"1 git push heroku master","title":"14. Finally Push to Heroku"},{"location":"git-guide-101/","text":"Git Guide 101 \u00b6 Commit \u00b6 The \"commit\" command is used to save your changes to the local repository. Initialized a repository \u00b6 1 git init Add a file to the staging area \u00b6 1 git add --all Commiting files \u00b6 1 2 git commit -m \"message\" git commit -am \"message with adding file to the staging area \" Repository log \u00b6 1 git log Repository status \u00b6 1 git status Unstaging files \u00b6 1 2 3 4 git reset --hard git diff <1stVer commit hash> <LastVer commit hash> :: difference btw changes made Branch \u00b6 In Git, branches are a part of your everyday development process. Git branches are effectively a pointer to a snapshot of your changes. When you want to add a new feature or fix a bug\u2014no matter how big or how small\u2014you spawn a new branch to encapsulate your changes. This makes it harder for unstable code to get merged into the main code base, and it gives you the chance to clean up your future's history before merging it into the main branch. Create a branch \u00b6 1 2 git branch <branch-name> git checkout -b <branch-name> Merging a branch \u00b6 1 git merge <source-branch-name> Listing branches \u00b6 1 2 git branch git brach --list Removing a branch \u00b6 1 git brach -d Create a tag \u00b6 1 git tag <tag-name> Replace a tag \u00b6 1 git tag -f <new-tag-name> Listing tags \u00b6 1 2 git tag -l git tag Removing a tag \u00b6 1 git tag -d <tag-name> Fixing Common issues \u00b6 \u00b6 1 git log --oneline Be carefull! When you ammend a commit, this will remove the tag from the commit if it has already Add tag to the latest ammend \u00b6 1 2 3 git tag git log --online git tag -f <update-tag> Show all changes \u00b6 1 git reflog Checkout differert state in the repository \u00b6 1 git reset HEAD@{5} Changes sitting there older version of this file \u00b6 1 2 3 4 5 6 git reset --hard or git reset HEAD@{3} --hard Reset Back to previous commits. \u00b6 1 2 git log --oneline git reset HEAD~2 --hard Last Commit gone but changes sitting there \u00b6 1 git reset HEAD~ --soft Stash -- file no need to put into stage \u00b6 1 git stash Taking stash file to the staging folder \u00b6 1 2 3 git stash pop git add --all git commit -m \"<message>\" Switch between branches A/B B/A \u00b6 1 git checkout - 1 2 3 4 5 6 \"\"\" Bubble sort \"\"\" def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Git Guide 101"},{"location":"git-guide-101/#git-guide-101","text":"","title":"Git Guide 101"},{"location":"git-guide-101/#commit","text":"The \"commit\" command is used to save your changes to the local repository.","title":"Commit"},{"location":"git-guide-101/#initialized-a-repository","text":"1 git init","title":"Initialized a repository"},{"location":"git-guide-101/#add-a-file-to-the-staging-area","text":"1 git add --all","title":"Add a file to the staging area"},{"location":"git-guide-101/#commiting-files","text":"1 2 git commit -m \"message\" git commit -am \"message with adding file to the staging area \"","title":"Commiting files"},{"location":"git-guide-101/#repository-log","text":"1 git log","title":"Repository log"},{"location":"git-guide-101/#repository-status","text":"1 git status","title":"Repository status"},{"location":"git-guide-101/#unstaging-files","text":"1 2 3 4 git reset --hard git diff <1stVer commit hash> <LastVer commit hash> :: difference btw changes made","title":"Unstaging files"},{"location":"git-guide-101/#branch","text":"In Git, branches are a part of your everyday development process. Git branches are effectively a pointer to a snapshot of your changes. When you want to add a new feature or fix a bug\u2014no matter how big or how small\u2014you spawn a new branch to encapsulate your changes. This makes it harder for unstable code to get merged into the main code base, and it gives you the chance to clean up your future's history before merging it into the main branch.","title":"Branch"},{"location":"git-guide-101/#create-a-branch","text":"1 2 git branch <branch-name> git checkout -b <branch-name>","title":"Create a branch"},{"location":"git-guide-101/#merging-a-branch","text":"1 git merge <source-branch-name>","title":"Merging a branch"},{"location":"git-guide-101/#listing-branches","text":"1 2 git branch git brach --list","title":"Listing branches"},{"location":"git-guide-101/#removing-a-branch","text":"1 git brach -d","title":"Removing a branch"},{"location":"git-guide-101/#create-a-tag","text":"1 git tag <tag-name>","title":"Create a tag"},{"location":"git-guide-101/#replace-a-tag","text":"1 git tag -f <new-tag-name>","title":"Replace a tag"},{"location":"git-guide-101/#listing-tags","text":"1 2 git tag -l git tag","title":"Listing tags"},{"location":"git-guide-101/#removing-a-tag","text":"1 git tag -d <tag-name>","title":"Removing a tag"},{"location":"git-guide-101/#fixing-common-issues","text":"","title":"Fixing Common issues"},{"location":"git-guide-101/#add-tag-to-the-latest-ammend","text":"1 2 3 git tag git log --online git tag -f <update-tag>","title":"Add tag to the latest ammend"},{"location":"git-guide-101/#show-all-changes","text":"1 git reflog","title":"Show all changes"},{"location":"git-guide-101/#checkout-differert-state-in-the-repository","text":"1 git reset HEAD@{5} Changes sitting there","title":"Checkout differert state in the repository"},{"location":"git-guide-101/#older-version-of-this-file","text":"1 2 3 4 5 6 git reset --hard or git reset HEAD@{3} --hard","title":"older version of this file"},{"location":"git-guide-101/#reset-back-to-previous-commits","text":"1 2 git log --oneline git reset HEAD~2 --hard","title":"Reset Back to previous commits."},{"location":"git-guide-101/#last-commit-gone-but-changes-sitting-there","text":"1 git reset HEAD~ --soft","title":"Last Commit gone but changes sitting there"},{"location":"git-guide-101/#stash-file-no-need-to-put-into-stage","text":"1 git stash","title":"Stash -- file no need to put into stage"},{"location":"git-guide-101/#taking-stash-file-to-the-staging-folder","text":"1 2 3 git stash pop git add --all git commit -m \"<message>\"","title":"Taking stash file to the staging folder"},{"location":"git-guide-101/#switch-between-branches-ab-ba","text":"1 git checkout - 1 2 3 4 5 6 \"\"\" Bubble sort \"\"\" def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Switch between branches A/B B/A"},{"location":"Contact/about/","text":"Majestic Technologix \u00b6 We help our customers reduce their revenue streams, increase their bottom line productivity through advanced web development + data science solutions. Our staff provides an opportunity to find innovative ways to strategically analyze and optimize operations when learning new market perspectives. We are one of the top data science companies in Pakistan that offers unique advantages. Developer \u00b6 Mohsin Mahmood \u00b6 mohsinmahmoodmdl@gmail.com - Github Contact Us \u00b6 Business Hour : Monday \u2013 Friday : 9am to 5pm Address : Plot No. 3, Block No. P, Valancia Town, Lahore E-mail : info[@]majestictechnologix.com Contact Info : (92) 3078820677 , (92) 3005634937","title":"About"},{"location":"Contact/about/#majestic-technologix","text":"We help our customers reduce their revenue streams, increase their bottom line productivity through advanced web development + data science solutions. Our staff provides an opportunity to find innovative ways to strategically analyze and optimize operations when learning new market perspectives. We are one of the top data science companies in Pakistan that offers unique advantages.","title":"Majestic Technologix"},{"location":"Contact/about/#developer","text":"","title":"Developer"},{"location":"Contact/about/#mohsin-mahmood","text":"mohsinmahmoodmdl@gmail.com - Github","title":"Mohsin Mahmood"},{"location":"Contact/about/#contact-us","text":"Business Hour : Monday \u2013 Friday : 9am to 5pm Address : Plot No. 3, Block No. P, Valancia Town, Lahore E-mail : info[@]majestictechnologix.com Contact Info : (92) 3078820677 , (92) 3005634937","title":"Contact Us"},{"location":"designPattern/design-pattern-intro/","text":"What is Design Pattern \u00b6 Design patterns are typical solutions to commonly occurring problems in software design. They are like pre-made blueprints that you can customize to solve a recurring design problem in your code. You can\u2019t just find a pattern and copy it into your program, the way you can with off-the-shelf functions or libraries. The pattern is not a specific piece of code, but a general concept for solving a particular problem. You can follow the pattern details and implement a solution that suits the realities of your own program. Patterns are often confused with algorithms, because both concepts describe typical solutions to some known problems. While an algorithm always defines a clear set of actions that can achieve some goal, a pattern is a more high-level description of a solution. The code of the same pattern applied to two different programs may be different. An analogy to an algorithm is a cooking recipe: both have clear steps to achieve a goal. On the other hand, a pattern is more like a blueprint: you can see what the result and its features are, but the exact order of implementation is up to you. What does the pattern consist of? \u00b6 Most patterns are described very formally so people can reproduce them in many contexts. Here are the sections that are usually present in a pattern description: Intent of the pattern briefly describes both the problem and the solution. Motivation further explains the problem and the solution the pattern makes possible. Structure of classes shows each part of the pattern and how they are related. Code example in one of the popular programming languages makes it easier to grasp the idea behind the pattern. Some pattern catalogs list other useful details, such as applicability of the pattern, implementation steps and relations with other patterns.","title":"What is Design Pattern"},{"location":"designPattern/design-pattern-intro/#what-is-design-pattern","text":"Design patterns are typical solutions to commonly occurring problems in software design. They are like pre-made blueprints that you can customize to solve a recurring design problem in your code. You can\u2019t just find a pattern and copy it into your program, the way you can with off-the-shelf functions or libraries. The pattern is not a specific piece of code, but a general concept for solving a particular problem. You can follow the pattern details and implement a solution that suits the realities of your own program. Patterns are often confused with algorithms, because both concepts describe typical solutions to some known problems. While an algorithm always defines a clear set of actions that can achieve some goal, a pattern is a more high-level description of a solution. The code of the same pattern applied to two different programs may be different. An analogy to an algorithm is a cooking recipe: both have clear steps to achieve a goal. On the other hand, a pattern is more like a blueprint: you can see what the result and its features are, but the exact order of implementation is up to you.","title":"What is Design Pattern"},{"location":"designPattern/design-pattern-intro/#what-does-the-pattern-consist-of","text":"Most patterns are described very formally so people can reproduce them in many contexts. Here are the sections that are usually present in a pattern description: Intent of the pattern briefly describes both the problem and the solution. Motivation further explains the problem and the solution the pattern makes possible. Structure of classes shows each part of the pattern and how they are related. Code example in one of the popular programming languages makes it easier to grasp the idea behind the pattern. Some pattern catalogs list other useful details, such as applicability of the pattern, implementation steps and relations with other patterns.","title":"What does the pattern consist of?"},{"location":"designPattern/behavioural/behaviour-dp/","text":"Bash 1 2 3 #!/bin/bash echo \"Hello world!\" C 1 2 3 4 5 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); } C++ 1 2 3 4 5 6 #include <iostream> int main () { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } C# 1 2 3 4 5 6 7 using System ; class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello world!\" ); } }","title":"Behaviour Pattern"},{"location":"designPattern/creational/creational-dp/","text":"Creational Design Pattern \u00b6 Creational design patterns provide various object creation mechanisms, which increase flexibility and reuse of existing code. Factory Method \u00b6 Shape.java 1 2 3 4 5 public interface Shape { void draw (); } Square.java 1 2 3 4 5 6 7 8 9 public class Square implements Shape { @Override public void draw () { System . out . println ( \"In square\" ); } } Circle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class Circle implements Shape { @Override public void draw () { System . out . println ( \"In Circle\" ); } @Override public String toString () { // TODO Auto-generated method stub return getClass (). getName () + \"Class\" ; } } Rectangle.java 1 2 3 4 5 6 7 8 9 public class Rectangle implements Shape { @Override public void draw () { System . out . println ( \"In Rectangle\" ); } } ShapeFactory.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public class ShapeFactory { public Shape getShape ( String shapetype ){ if ( shapetype == null ) { return null ; } else if ( shapetype . equalsIgnoreCase ( \"circle\" ) ) { return new Circle (); } else if ( shapetype . equalsIgnoreCase ( \"rectangle\" ) ) { return new Rectangle (); } else if ( shapetype . equalsIgnoreCase ( \"Square\" ) ) { return new Square (); } return null ; } } FactoryDemo.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class FactoryDemo { public static void main ( String [] args ) { ShapeFactory factory = new ShapeFactory (); Shape circle = factory . getShape ( \"Circle\" ); circle . draw (); Shape rectangle = factory . getShape ( \"rectangle\" ); rectangle . draw (); } } Abstract Factory Method \u00b6 Color.java 1 2 3 4 5 public interface Color { public void fill (); } Blue.java 1 2 3 4 5 6 7 8 public class Blue implements Color { @Override public void fill () { System . out . println ( \"filling Blue color\" ); } } Green.java 1 2 3 4 5 6 7 8 public class Green implements Color { @Override public void fill () { System . out . println ( \"filling Green color\" ); } } Red.java 1 2 3 4 5 6 7 8 9 public class Red implements Color { @Override public void fill () { System . out . println ( \"filling red color\" ); } } Shape.java 1 2 3 4 5 public interface Shape { void draw (); } Square.java 1 2 3 4 5 6 7 8 9 public class Square implements Shape { @Override public void draw () { System . out . println ( \"In square\" ); } } Circle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class Circle implements Shape { @Override public void draw () { System . out . println ( \"In Circle\" ); } @Override public String toString () { // TODO Auto-generated method stub return getClass (). getName () + \"Class\" ; } } Rectangle.java 1 2 3 4 5 6 7 8 9 public class Rectangle implements Shape { @Override public void draw () { System . out . println ( \"In Rectangle\" ); } } AbstractFactory.java 1 2 3 4 5 6 public abstract class AbstractFactory { public abstract Shape getShape ( String shapetype ); public abstract Color getColor ( String type ); } ColorFactory.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public class ColorFactory extends AbstractFactory { @Override public Color getColor ( String type ){ if ( type == null ) { System . out . println ( \"yes i am in\" ); return null ; } else if ( type . equalsIgnoreCase ( \"Green\" )) { return new Green (); } else if ( type . equalsIgnoreCase ( \"Blue\" )) { return new Blue (); } else if ( type . equalsIgnoreCase ( \"Red\" )) { return new Red (); } return null ; } @Override public Shape getShape ( String shapetype ) { // TODO Auto-generated method stub return null ; } } ShapeFactory.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 public class ShapeFactory extends AbstractFactory { public Shape getShape ( String shapetype ){ if ( shapetype == null ) { return null ; } else if ( shapetype . equalsIgnoreCase ( \"circle\" ) ) { return new Circle (); } else if ( shapetype . equalsIgnoreCase ( \"rectangle\" ) ) { return new Rectangle (); } else if ( shapetype . equalsIgnoreCase ( \"Square\" ) ) { return new Square (); } return null ; } @Override public Color getColor ( String type ) { // TODO Auto-generated method stub return null ; } } FactoryProducer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class FactoryProducer { public static AbstractFactory getFactory ( String type ){ if ( type == null ) { return null ; } else if ( type . equalsIgnoreCase ( \"Shape\" )) { return new ShapeFactory (); } else if ( type . equalsIgnoreCase ( \"Color\" )) { return new ColorFactory (); } return null ; } } AbstractFactoryPatternDemo.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class AbstractFactoryPatternDemo { public static void main ( String [] args ) { AbstractFactory shapeFactory = FactoryProducer . getFactory ( \"Shape\" ); Shape circle = shapeFactory . getShape ( \"Circle\" ); circle . draw (); AbstractFactory colorFactory = FactoryProducer . getFactory ( \"Color\" ); Color red = colorFactory . getColor ( \"Green\" ); red . fill (); } } Singleton Pattern \u00b6 This is how Singleton Class looks like Singleton.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class Singleton { private static Singleton uniqueInstance ; private Singleton (){}; public static Singleton getInstance (){ if ( uniqueInstance == null ) { synchronized ( Singleton . class ) { if ( uniqueInstance == null ) { uniqueInstance = new Singleton (); } } } return uniqueInstance ; } } Example Preferences.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class Singleton { private static Singleton uniqueInstance ; private Singleton (){}; public static Singleton getInstance (){ if ( uniqueInstance == null ) { synchronized ( Singleton . class ) { if ( uniqueInstance == null ) { uniqueInstance = new Singleton (); } } } return uniqueInstance ; } } Settings.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class Settings { Preferences settings = Preferences . getInstance (); public Settings () { settings . setCgpa ( 3.14 ); settings . setContact ( \"03336363636\" ); settings . setEmail ( \"mohsinmahmoodmdl@gmail.com\" ); settings . setName ( \"Muhammad Mohsin Mahmood\" ); } public void showSettings () { settings . show (); } } Contact.java 1 2 3 4 5 6 7 8 9 10 public class Contact { Preferences settings = Preferences . getInstance (); public void showSettings () { settings . show (); } } Home.java 1 2 3 4 5 6 7 8 9 10 public class Home { Preferences settings = Preferences . getInstance (); public void showSettings () { settings . show (); } } SingletonDemo.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public class SingletonDemo { public static void main ( String [] args ) { Settings settings = new Settings (); settings . showSettings (); System . out . println ( \"\\nHome: Settings\" ); System . out . println ( \"================\" ); Home home = new Home (); home . showSettings (); System . out . println ( \"\\nContact: Settings\" ); System . out . println ( \"================\" ); Contact contact = new Contact (); contact . showSettings (); } } Prototype Pattern \u00b6 Person.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public class Person { private String name ; public Person ( String name ) { this . name = name ; } public void setName ( String name ) { this . name = name ; } public String getName () { return name ; } } Car.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public class Car implements Cloneable { private Person owner ; public Car () { } public void setOwner ( String name ) { Person owner = new Person ( name ); this . owner = owner ; } public Person getOwner () { return owner ; } public Object clone () { try { Car car = ( Car ) super . clone (); return car ; } catch ( CloneNotSupportedException e ) { throw new AssertionError (); } } } Main.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class Main { public static void main ( String [] args ) throws CloneNotSupportedException { Car honda = new Car (); honda . setOwner ( \"Mohsin Mahmood\" ); Car hondacopy = ( Car ) honda . clone (); System . out . println ( \"Name of first owner \" + honda . getOwner (). getName ()); System . out . println ( \"Name of first owner \" + hondacopy . getOwner (). getName ()); } } Lab Exam Creational Pattern \u00b6 AudioPlayer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public interface AudioPlayer { public void play (); public void forward (); public void backward (); public void stop (); } MP3Player.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class MP3Player implements AudioPlayer { public void play () { System . out . println ( \"Running media file from \" + getClass (). getName ()); } public void forward () { // TODO Auto-generated method stub } public void backward () { // TODO Auto-generated method stub } public void stop () { // TODO Auto-generated method stub } } JetAudioHDPlayer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class JetAudioHDPlayer implements AudioPlayer { public void play () { System . out . println ( \"Running media file from \" + getClass (). getName ()); } public void forward () { // TODO Auto-generated method stub } public void backward () { // TODO Auto-generated method stub } public void stop () { // TODO Auto-generated method stub } } WinAmpPlayer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class WinAmpPlayer implements AudioPlayer { public void play () { System . out . println ( \"Running media file from \" + getClass (). getName ()); } public void forward () { // TODO Auto-generated method stub } public void backward () { // TODO Auto-generated method stub } public void stop () { // TODO Auto-generated method stub } } VideoPlayer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public interface VideoPlayer { public void play (); public void forward (); public void backward (); public void stop (); } VLCMediaPlayer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class VLCMediaPlayer implements VideoPlayer { public void play () { System . out . println ( \"Running media file from \" + getClass (). getName ()); } public void forward () { // TODO Auto-generated method stub } public void backward () { // TODO Auto-generated method stub } public void stop () { // TODO Auto-generated method stub } } WindowsMediaPlayer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class WindowsMediaPlayer implements VideoPlayer { public void play () { System . out . println ( \"Running media file from \" + getClass (). getName ()); } public void forward () { // TODO Auto-generated method stub } public void backward () { // TODO Auto-generated method stub } public void stop () { // TODO Auto-generated method stub } } AdobeFlashPlayer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class AdobeFlashPlayer implements VideoPlayer { public void play () { System . out . println ( \"Running media file from \" + getClass (). getName ()); } public void forward () { // TODO Auto-generated method stub } public void backward () { // TODO Auto-generated method stub } public void stop () { // TODO Auto-generated method stub } } AbstractFactory.java 1 2 3 4 5 6 7 8 9 10 11 12 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public abstract class AbstractFactory { public abstract VideoPlayer getVideoPlayer ( String type ); public abstract AudioPlayer getAudioPlayer ( String type ); } AudioPlayerFactory.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class AudioPlayerFactory extends AbstractFactory { public AudioPlayer getAudioPlayer ( String type ) { if ( type == null ) { return null ; } else if ( type . equalsIgnoreCase ( \"MP3Player\" )) { return new MP3Player (); } else if ( type . equalsIgnoreCase ( \"JetAudioHDPlayer\" )) { return new JetAudioHDPlayer (); } else if ( type . equalsIgnoreCase ( \"WinAmpPlayer\" )) { return new WinAmpPlayer (); } return null ; } public VideoPlayer getVideoPlayer ( String type ) { // TODO Auto-generated method stub return null ; } } VideoPlayerFactory.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class VideoPlayerFactory extends AbstractFactory { public VideoPlayer getVideoPlayer ( String type ) { if ( type == null ) { return null ; } else if ( type . equalsIgnoreCase ( \"VLCMediaPlayer\" )) { return new VLCMediaPlayer (); } else if ( type . equalsIgnoreCase ( \"WindowsMediaPlayer\" )) { return new WindowsMediaPlayer (); } else if ( type . equalsIgnoreCase ( \"AdobeFlashPlayer\" )) { return new AdobeFlashPlayer (); } return null ; } public AudioPlayer getAudioPlayer ( String type ) { // TODO Auto-generated method stub return null ; } } FactoryProducer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class FactoryProducer { public static AbstractFactory getFactory ( String type ) { if ( type == null ) { return null ; } else if ( type . equalsIgnoreCase ( \"AudioPlayerFactory\" )) { return new AudioPlayerFactory (); } else if ( type . equalsIgnoreCase ( \"VideoPlayerFactory\" )) { return new VideoPlayerFactory (); } return null ; } } MusicPlayerFactoryDemo.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class MusicPlayerFactoryDemo { public static void main ( String [] args ) { //getting Audio Factory AbstractFactory factory = FactoryProducer . getFactory ( \"AudioPlayerFactory\" ); // getting \"MP3Player\" audio player AudioPlayer mp3Player = factory . getAudioPlayer ( \"MP3Player\" ); mp3Player . play (); AudioPlayer jetaudio = factory . getAudioPlayer ( \"JetAudioHDPlayer\" ); jetaudio . play (); AudioPlayer winamp = factory . getAudioPlayer ( \"WinAmpPlayer\" ); winamp . play (); System . out . println ( \"\\n=======================================\\n\" ); //Creating Video Factory AbstractFactory factory2 = FactoryProducer . getFactory ( \"VideoPlayerFactory\" ); VideoPlayer vlc = factory2 . getVideoPlayer ( \"VLCMediaPlayer\" ); vlc . play (); VideoPlayer wmp = factory2 . getVideoPlayer ( \"WindowsMediaPlayer\" ); wmp . play (); VideoPlayer flash = factory2 . getVideoPlayer ( \"AdobeFlashPlayer\" ); flash . play (); } }","title":"Creational Pattern"},{"location":"designPattern/creational/creational-dp/#creational-design-pattern","text":"Creational design patterns provide various object creation mechanisms, which increase flexibility and reuse of existing code.","title":"Creational Design Pattern"},{"location":"designPattern/creational/creational-dp/#factory-method","text":"Shape.java 1 2 3 4 5 public interface Shape { void draw (); } Square.java 1 2 3 4 5 6 7 8 9 public class Square implements Shape { @Override public void draw () { System . out . println ( \"In square\" ); } } Circle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class Circle implements Shape { @Override public void draw () { System . out . println ( \"In Circle\" ); } @Override public String toString () { // TODO Auto-generated method stub return getClass (). getName () + \"Class\" ; } } Rectangle.java 1 2 3 4 5 6 7 8 9 public class Rectangle implements Shape { @Override public void draw () { System . out . println ( \"In Rectangle\" ); } } ShapeFactory.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public class ShapeFactory { public Shape getShape ( String shapetype ){ if ( shapetype == null ) { return null ; } else if ( shapetype . equalsIgnoreCase ( \"circle\" ) ) { return new Circle (); } else if ( shapetype . equalsIgnoreCase ( \"rectangle\" ) ) { return new Rectangle (); } else if ( shapetype . equalsIgnoreCase ( \"Square\" ) ) { return new Square (); } return null ; } } FactoryDemo.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class FactoryDemo { public static void main ( String [] args ) { ShapeFactory factory = new ShapeFactory (); Shape circle = factory . getShape ( \"Circle\" ); circle . draw (); Shape rectangle = factory . getShape ( \"rectangle\" ); rectangle . draw (); } }","title":"Factory Method"},{"location":"designPattern/creational/creational-dp/#abstract-factory-method","text":"Color.java 1 2 3 4 5 public interface Color { public void fill (); } Blue.java 1 2 3 4 5 6 7 8 public class Blue implements Color { @Override public void fill () { System . out . println ( \"filling Blue color\" ); } } Green.java 1 2 3 4 5 6 7 8 public class Green implements Color { @Override public void fill () { System . out . println ( \"filling Green color\" ); } } Red.java 1 2 3 4 5 6 7 8 9 public class Red implements Color { @Override public void fill () { System . out . println ( \"filling red color\" ); } } Shape.java 1 2 3 4 5 public interface Shape { void draw (); } Square.java 1 2 3 4 5 6 7 8 9 public class Square implements Shape { @Override public void draw () { System . out . println ( \"In square\" ); } } Circle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class Circle implements Shape { @Override public void draw () { System . out . println ( \"In Circle\" ); } @Override public String toString () { // TODO Auto-generated method stub return getClass (). getName () + \"Class\" ; } } Rectangle.java 1 2 3 4 5 6 7 8 9 public class Rectangle implements Shape { @Override public void draw () { System . out . println ( \"In Rectangle\" ); } } AbstractFactory.java 1 2 3 4 5 6 public abstract class AbstractFactory { public abstract Shape getShape ( String shapetype ); public abstract Color getColor ( String type ); } ColorFactory.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public class ColorFactory extends AbstractFactory { @Override public Color getColor ( String type ){ if ( type == null ) { System . out . println ( \"yes i am in\" ); return null ; } else if ( type . equalsIgnoreCase ( \"Green\" )) { return new Green (); } else if ( type . equalsIgnoreCase ( \"Blue\" )) { return new Blue (); } else if ( type . equalsIgnoreCase ( \"Red\" )) { return new Red (); } return null ; } @Override public Shape getShape ( String shapetype ) { // TODO Auto-generated method stub return null ; } } ShapeFactory.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 public class ShapeFactory extends AbstractFactory { public Shape getShape ( String shapetype ){ if ( shapetype == null ) { return null ; } else if ( shapetype . equalsIgnoreCase ( \"circle\" ) ) { return new Circle (); } else if ( shapetype . equalsIgnoreCase ( \"rectangle\" ) ) { return new Rectangle (); } else if ( shapetype . equalsIgnoreCase ( \"Square\" ) ) { return new Square (); } return null ; } @Override public Color getColor ( String type ) { // TODO Auto-generated method stub return null ; } } FactoryProducer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class FactoryProducer { public static AbstractFactory getFactory ( String type ){ if ( type == null ) { return null ; } else if ( type . equalsIgnoreCase ( \"Shape\" )) { return new ShapeFactory (); } else if ( type . equalsIgnoreCase ( \"Color\" )) { return new ColorFactory (); } return null ; } } AbstractFactoryPatternDemo.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class AbstractFactoryPatternDemo { public static void main ( String [] args ) { AbstractFactory shapeFactory = FactoryProducer . getFactory ( \"Shape\" ); Shape circle = shapeFactory . getShape ( \"Circle\" ); circle . draw (); AbstractFactory colorFactory = FactoryProducer . getFactory ( \"Color\" ); Color red = colorFactory . getColor ( \"Green\" ); red . fill (); } }","title":"Abstract Factory Method"},{"location":"designPattern/creational/creational-dp/#singleton-pattern","text":"This is how Singleton Class looks like Singleton.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class Singleton { private static Singleton uniqueInstance ; private Singleton (){}; public static Singleton getInstance (){ if ( uniqueInstance == null ) { synchronized ( Singleton . class ) { if ( uniqueInstance == null ) { uniqueInstance = new Singleton (); } } } return uniqueInstance ; } } Example Preferences.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class Singleton { private static Singleton uniqueInstance ; private Singleton (){}; public static Singleton getInstance (){ if ( uniqueInstance == null ) { synchronized ( Singleton . class ) { if ( uniqueInstance == null ) { uniqueInstance = new Singleton (); } } } return uniqueInstance ; } } Settings.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class Settings { Preferences settings = Preferences . getInstance (); public Settings () { settings . setCgpa ( 3.14 ); settings . setContact ( \"03336363636\" ); settings . setEmail ( \"mohsinmahmoodmdl@gmail.com\" ); settings . setName ( \"Muhammad Mohsin Mahmood\" ); } public void showSettings () { settings . show (); } } Contact.java 1 2 3 4 5 6 7 8 9 10 public class Contact { Preferences settings = Preferences . getInstance (); public void showSettings () { settings . show (); } } Home.java 1 2 3 4 5 6 7 8 9 10 public class Home { Preferences settings = Preferences . getInstance (); public void showSettings () { settings . show (); } } SingletonDemo.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public class SingletonDemo { public static void main ( String [] args ) { Settings settings = new Settings (); settings . showSettings (); System . out . println ( \"\\nHome: Settings\" ); System . out . println ( \"================\" ); Home home = new Home (); home . showSettings (); System . out . println ( \"\\nContact: Settings\" ); System . out . println ( \"================\" ); Contact contact = new Contact (); contact . showSettings (); } }","title":"Singleton Pattern"},{"location":"designPattern/creational/creational-dp/#prototype-pattern","text":"Person.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public class Person { private String name ; public Person ( String name ) { this . name = name ; } public void setName ( String name ) { this . name = name ; } public String getName () { return name ; } } Car.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public class Car implements Cloneable { private Person owner ; public Car () { } public void setOwner ( String name ) { Person owner = new Person ( name ); this . owner = owner ; } public Person getOwner () { return owner ; } public Object clone () { try { Car car = ( Car ) super . clone (); return car ; } catch ( CloneNotSupportedException e ) { throw new AssertionError (); } } } Main.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class Main { public static void main ( String [] args ) throws CloneNotSupportedException { Car honda = new Car (); honda . setOwner ( \"Mohsin Mahmood\" ); Car hondacopy = ( Car ) honda . clone (); System . out . println ( \"Name of first owner \" + honda . getOwner (). getName ()); System . out . println ( \"Name of first owner \" + hondacopy . getOwner (). getName ()); } }","title":"Prototype Pattern"},{"location":"designPattern/creational/creational-dp/#lab-exam-creational-pattern","text":"AudioPlayer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public interface AudioPlayer { public void play (); public void forward (); public void backward (); public void stop (); } MP3Player.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class MP3Player implements AudioPlayer { public void play () { System . out . println ( \"Running media file from \" + getClass (). getName ()); } public void forward () { // TODO Auto-generated method stub } public void backward () { // TODO Auto-generated method stub } public void stop () { // TODO Auto-generated method stub } } JetAudioHDPlayer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class JetAudioHDPlayer implements AudioPlayer { public void play () { System . out . println ( \"Running media file from \" + getClass (). getName ()); } public void forward () { // TODO Auto-generated method stub } public void backward () { // TODO Auto-generated method stub } public void stop () { // TODO Auto-generated method stub } } WinAmpPlayer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class WinAmpPlayer implements AudioPlayer { public void play () { System . out . println ( \"Running media file from \" + getClass (). getName ()); } public void forward () { // TODO Auto-generated method stub } public void backward () { // TODO Auto-generated method stub } public void stop () { // TODO Auto-generated method stub } } VideoPlayer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public interface VideoPlayer { public void play (); public void forward (); public void backward (); public void stop (); } VLCMediaPlayer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class VLCMediaPlayer implements VideoPlayer { public void play () { System . out . println ( \"Running media file from \" + getClass (). getName ()); } public void forward () { // TODO Auto-generated method stub } public void backward () { // TODO Auto-generated method stub } public void stop () { // TODO Auto-generated method stub } } WindowsMediaPlayer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class WindowsMediaPlayer implements VideoPlayer { public void play () { System . out . println ( \"Running media file from \" + getClass (). getName ()); } public void forward () { // TODO Auto-generated method stub } public void backward () { // TODO Auto-generated method stub } public void stop () { // TODO Auto-generated method stub } } AdobeFlashPlayer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class AdobeFlashPlayer implements VideoPlayer { public void play () { System . out . println ( \"Running media file from \" + getClass (). getName ()); } public void forward () { // TODO Auto-generated method stub } public void backward () { // TODO Auto-generated method stub } public void stop () { // TODO Auto-generated method stub } } AbstractFactory.java 1 2 3 4 5 6 7 8 9 10 11 12 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public abstract class AbstractFactory { public abstract VideoPlayer getVideoPlayer ( String type ); public abstract AudioPlayer getAudioPlayer ( String type ); } AudioPlayerFactory.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class AudioPlayerFactory extends AbstractFactory { public AudioPlayer getAudioPlayer ( String type ) { if ( type == null ) { return null ; } else if ( type . equalsIgnoreCase ( \"MP3Player\" )) { return new MP3Player (); } else if ( type . equalsIgnoreCase ( \"JetAudioHDPlayer\" )) { return new JetAudioHDPlayer (); } else if ( type . equalsIgnoreCase ( \"WinAmpPlayer\" )) { return new WinAmpPlayer (); } return null ; } public VideoPlayer getVideoPlayer ( String type ) { // TODO Auto-generated method stub return null ; } } VideoPlayerFactory.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class VideoPlayerFactory extends AbstractFactory { public VideoPlayer getVideoPlayer ( String type ) { if ( type == null ) { return null ; } else if ( type . equalsIgnoreCase ( \"VLCMediaPlayer\" )) { return new VLCMediaPlayer (); } else if ( type . equalsIgnoreCase ( \"WindowsMediaPlayer\" )) { return new WindowsMediaPlayer (); } else if ( type . equalsIgnoreCase ( \"AdobeFlashPlayer\" )) { return new AdobeFlashPlayer (); } return null ; } public AudioPlayer getAudioPlayer ( String type ) { // TODO Auto-generated method stub return null ; } } FactoryProducer.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class FactoryProducer { public static AbstractFactory getFactory ( String type ) { if ( type == null ) { return null ; } else if ( type . equalsIgnoreCase ( \"AudioPlayerFactory\" )) { return new AudioPlayerFactory (); } else if ( type . equalsIgnoreCase ( \"VideoPlayerFactory\" )) { return new VideoPlayerFactory (); } return null ; } } MusicPlayerFactoryDemo.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 /* * * Muhammad Mohsin Mahmood * SP16-BSE-060 * * */ public class MusicPlayerFactoryDemo { public static void main ( String [] args ) { //getting Audio Factory AbstractFactory factory = FactoryProducer . getFactory ( \"AudioPlayerFactory\" ); // getting \"MP3Player\" audio player AudioPlayer mp3Player = factory . getAudioPlayer ( \"MP3Player\" ); mp3Player . play (); AudioPlayer jetaudio = factory . getAudioPlayer ( \"JetAudioHDPlayer\" ); jetaudio . play (); AudioPlayer winamp = factory . getAudioPlayer ( \"WinAmpPlayer\" ); winamp . play (); System . out . println ( \"\\n=======================================\\n\" ); //Creating Video Factory AbstractFactory factory2 = FactoryProducer . getFactory ( \"VideoPlayerFactory\" ); VideoPlayer vlc = factory2 . getVideoPlayer ( \"VLCMediaPlayer\" ); vlc . play (); VideoPlayer wmp = factory2 . getVideoPlayer ( \"WindowsMediaPlayer\" ); wmp . play (); VideoPlayer flash = factory2 . getVideoPlayer ( \"AdobeFlashPlayer\" ); flash . play (); } }","title":"Lab Exam Creational Pattern"},{"location":"designPattern/structural/structural-dp/","text":"FielName.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class FactoryDemo { public static void main ( String [] args ) { ShapeFactory factory = new ShapeFactory (); Shape circle = factory . getShape ( \"Circle\" ); circle . draw (); Shape rectangle = factory . getShape ( \"rectangle\" ); rectangle . draw (); } }","title":"Structural Pattern"}]}