{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Push your Django App to Heroku Mohsin Mahmood edited this page on May 22, 2019 Heroku is a cloud application platform, it is a PaaS (Platform-as-a-service) service. It allows you to deploy your web application from your localhost to cloud so that your application could be commercialized and could get production ready. 1. Preparing your application Copy the Project folder separately for deployment. 2. Initialize Git Repositor Install Git Press CTRL + R Type cmd and click OK Navigate to project folder Make sure your are in the directory where the manage.py exists git config --global user.name \"Your Name\" git config --global user.email \"you@youraddress.com\" git config --global user.email \"you@youraddress.com\" git init 3. Add Files To Git git add --all git commit -m \"Commit Message\" git push 4. Activate Virtual Environment Activating virtual environment. manage.py # The configuration file. venv/ Scripts/ activate Run these command to activate the environment. cd venv/Scripts/ activate If virtual environment not already exists. Run these commands on command prompt. pip install virtualenv Install all the required libraries that your project required via pip command. Plus install the following dependencies in your virtual environment. pip install gunicorn pip install django-heroku pip install python-decouple django-heroku: official package by Heroku which made our deployment simple. 5 Modify Setting.py file Now, In app/settings.py file add below content #import os import django_heroku from decouple import config import dj_database_url At the end of the setting.py file add this line also. django_heroku.settings(locals()) Now we need to hide the SECRET_KEY from the deployment code. For this, add this line of code before SECRET_KEY = \"Djfhslkdfsjf*(skdf0suerjwehksjdf\" SECRET_KEY = config('SECRET_KEY') Move your actual SECRET_KEY to the .env file that we are going to create. 6. Create a file .env Now, run a command in your terminal.It will create a file .env in your app directory. touch .env Add your SECRET_KEY from setting.py to .env file. 7. Adding more to setting.py Do this in your app/settings.py . STATICFILES_DIRS = [ os.path.join(BASE_DIR, \"static\") ] Make sure you do not have this command in setting.py file already. If so remain it as it is. For more info STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') 8. Static file serving for web apps To serve static assets I use the WhiteNoise project. To install: pip install whitenoise For more info Do this in your app/settings.py file. #... #'django.middleware.security.SecurityMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware', #'django.contrib.sessions.middleware.SessionMiddleware', #'django.middleware.common.CommonMiddleware', #... STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' 9. Create a Procfile Open the command prompt in your directory and type this command. Make sure you type Procfile correctly (casesensitve) touch Procfile Open the Procfile and add this line in the file. web: gunicorn <project name>.wsgi 10. Run Django Server Type this command in the command promt to open the django server. python manage.py runserver run this command too. python manage.py migrate If your site is working correctly then move to next step. 11. Creating a file requirements.txt This command create a file requiremets.txt and add all the dependencies that your application needed while pushing to heroku. pip freeze > requirements.txt add dependency requests==2.21.0 to the requirements.txt file. 12. Heroku Sign up Start a heroku account\u200a\u2014\u200aSign up. Install Heroku Toolbelt commands After installing heroku toolbelt your terminal will support all the heroku commands.Open your terminal as administrator and run this code heroku login login to your heroku account via terminal Enter your Heroku credentials. Email: example@gmail.com Password (typing will be hidden): Authentication successful. Inside the project root, create a Heroku App: heroku create Adding a Heroku app to Git remote heroku git:remote -a <APPNAME> Open the heroku dashboard and navigate to your new created app. In setting tab, add the config vars: SECRET_KEY 13. Update Git repository git add --all git status # to view all the changes git commit -m \"ready to push\" 14. Finally Push to Heroku git push heroku master","title":"Home"},{"location":"#push-your-django-app-to-heroku","text":"Mohsin Mahmood edited this page on May 22, 2019 Heroku is a cloud application platform, it is a PaaS (Platform-as-a-service) service. It allows you to deploy your web application from your localhost to cloud so that your application could be commercialized and could get production ready.","title":"Push your Django App to Heroku"},{"location":"#1-preparing-your-application","text":"Copy the Project folder separately for deployment.","title":"1. Preparing your application"},{"location":"#2-initialize-git-repositor","text":"Install Git Press CTRL + R Type cmd and click OK Navigate to project folder Make sure your are in the directory where the manage.py exists git config --global user.name \"Your Name\" git config --global user.email \"you@youraddress.com\" git config --global user.email \"you@youraddress.com\" git init","title":"2. Initialize Git Repositor"},{"location":"#3-add-files-to-git","text":"git add --all git commit -m \"Commit Message\" git push","title":"3. Add Files To Git"},{"location":"#4-activate-virtual-environment","text":"Activating virtual environment. manage.py # The configuration file. venv/ Scripts/ activate Run these command to activate the environment. cd venv/Scripts/ activate If virtual environment not already exists. Run these commands on command prompt. pip install virtualenv Install all the required libraries that your project required via pip command. Plus install the following dependencies in your virtual environment. pip install gunicorn pip install django-heroku pip install python-decouple django-heroku: official package by Heroku which made our deployment simple.","title":"4. Activate Virtual Environment"},{"location":"#5-modify-settingpy-file","text":"Now, In app/settings.py file add below content #import os import django_heroku from decouple import config import dj_database_url At the end of the setting.py file add this line also. django_heroku.settings(locals()) Now we need to hide the SECRET_KEY from the deployment code. For this, add this line of code before SECRET_KEY = \"Djfhslkdfsjf*(skdf0suerjwehksjdf\" SECRET_KEY = config('SECRET_KEY') Move your actual SECRET_KEY to the .env file that we are going to create.","title":"5 Modify Setting.py file"},{"location":"#6-create-a-file-env","text":"Now, run a command in your terminal.It will create a file .env in your app directory. touch .env Add your SECRET_KEY from setting.py to .env file.","title":"6. Create a file .env"},{"location":"#7-adding-more-to-settingpy","text":"Do this in your app/settings.py . STATICFILES_DIRS = [ os.path.join(BASE_DIR, \"static\") ] Make sure you do not have this command in setting.py file already. If so remain it as it is. For more info STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')","title":"7. Adding more to setting.py"},{"location":"#8-static-file-serving-for-web-apps","text":"To serve static assets I use the WhiteNoise project. To install: pip install whitenoise For more info Do this in your app/settings.py file. #... #'django.middleware.security.SecurityMiddleware', 'whitenoise.middleware.WhiteNoiseMiddleware', #'django.contrib.sessions.middleware.SessionMiddleware', #'django.middleware.common.CommonMiddleware', #... STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'","title":"8. Static file serving for web apps"},{"location":"#9-create-a-procfile","text":"Open the command prompt in your directory and type this command. Make sure you type Procfile correctly (casesensitve) touch Procfile Open the Procfile and add this line in the file. web: gunicorn <project name>.wsgi","title":"9. Create a Procfile"},{"location":"#10-run-django-server","text":"Type this command in the command promt to open the django server. python manage.py runserver run this command too. python manage.py migrate If your site is working correctly then move to next step.","title":"10. Run Django Server"},{"location":"#11-creating-a-file-requirementstxt","text":"This command create a file requiremets.txt and add all the dependencies that your application needed while pushing to heroku. pip freeze > requirements.txt add dependency requests==2.21.0 to the requirements.txt file.","title":"11. Creating a file requirements.txt"},{"location":"#12-heroku-sign-up","text":"Start a heroku account\u200a\u2014\u200aSign up. Install Heroku Toolbelt commands After installing heroku toolbelt your terminal will support all the heroku commands.Open your terminal as administrator and run this code heroku login login to your heroku account via terminal Enter your Heroku credentials. Email: example@gmail.com Password (typing will be hidden): Authentication successful. Inside the project root, create a Heroku App: heroku create Adding a Heroku app to Git remote heroku git:remote -a <APPNAME> Open the heroku dashboard and navigate to your new created app. In setting tab, add the config vars: SECRET_KEY","title":"12. Heroku Sign up"},{"location":"#13-update-git-repository","text":"git add --all git status # to view all the changes git commit -m \"ready to push\"","title":"13. Update Git repository"},{"location":"#14-finally-push-to-heroku","text":"git push heroku master","title":"14. Finally Push to Heroku"},{"location":"about/","text":"Majestic Technologix We help our customers reduce their revenue streams, increase their bottom line productivity through advanced web development + data science solutions. Our staff provides an opportunity to find innovative ways to strategically analyze and optimize operations when learning new market perspectives. We are one of the top data science companies in Pakistan that offers unique advantages. Developer Mohsin Mahmood mohsinmahmoodmdl@gmail.com Contact Us Business Hour : Monday \u2013 Friday : 9am to 5pm Address : Plot No. 3, Block No. P, Valancia Town, Lahore E-mail : info[@]majestictechnologix.com Contact Info : (92) 3078820677 , (92) 3005634937","title":"About"},{"location":"about/#majestic-technologix","text":"We help our customers reduce their revenue streams, increase their bottom line productivity through advanced web development + data science solutions. Our staff provides an opportunity to find innovative ways to strategically analyze and optimize operations when learning new market perspectives. We are one of the top data science companies in Pakistan that offers unique advantages.","title":"Majestic Technologix"},{"location":"about/#developer","text":"","title":"Developer"},{"location":"about/#mohsin-mahmood","text":"mohsinmahmoodmdl@gmail.com","title":"Mohsin Mahmood"},{"location":"about/#contact-us","text":"Business Hour : Monday \u2013 Friday : 9am to 5pm Address : Plot No. 3, Block No. P, Valancia Town, Lahore E-mail : info[@]majestictechnologix.com Contact Info : (92) 3078820677 , (92) 3005634937","title":"Contact Us"}]}